#!/bin/bash
PROGNAME=`basename "$0"`
export EOS_DIR=`pwd`

#==============================================================================
# print script usage information
#==============================================================================

function usage {
  echo "./${PROGNAME} -d|-s|-a"
  echo "  -d delete/destroy all existing containers and images"
  echo "  -s start up containers and configure eos"
  echo "  -c only create files"
  echo "  -a do everything, in above order"
  echo "  -e turn on extra debugging: XrdSecDEBUG=3 & XRD_LOGLEVEL=Dump"
  exit 1
}

#==============================================================================
# tear down existing containers
#==============================================================================

function destroy {
  sudo docker-compose down -v
  sudo rm -rf ${EOS_DIR}/e
}

#==============================================================================
# recreate files
#==============================================================================

function create_files {
  sudo mkdir  -p ${EOS_DIR}/e
  sudo mkdir  -p ${EOS_DIR}/e/master
  sudo mkdir  -p ${EOS_DIR}/e/master/log
  sudo mkdir  -p ${EOS_DIR}/e/master/log/tx
  sudo mkdir  -p ${EOS_DIR}/e/master/md
  sudo mkdir  -p ${EOS_DIR}/e/master/config
  sudo mkdir  -p ${EOS_DIR}/e/master/ns-queue
  sudo mkdir  -p ${EOS_DIR}/e/disks
  sudo mkdir  -p ${EOS_DIR}/e/log
  sudo mkdir  -p ${EOS_DIR}/e/eos
  sudo mkdir  -p ${EOS_DIR}/e/eosxd
  sudo mkdir  -p ${EOS_DIR}/e/fusex
  for i in {1..3}; do
    sudo mkdir -p ${EOS_DIR}/e/quark${i}/ns
    sudo mkdir -p ${EOS_DIR}/e/quark${i}/log
  done

  # must be daemon:daemon
  sudo chown -R 2:2 ${EOS_DIR}/e
}

#==============================================================================
# set up eos test instances
#==============================================================================

function setup {
  sudo docker-compose up -d
  exit

  sleep 5
  echo "Expect to see *sudo and effective uid 0 here:"
  echo; sudo docker exec mgm-master eos whoami
  echo; sudo docker exec mgm-master eos ns || { echo 'Master MGM failed to start - check logs in e/master/log/mgm/xrdlog.mgm' ; exit 1; }
  echo; sudo docker exec mgm-master eos node ls

  sleep 5
  echo; echo "===== DOING SOME CONFIGURATION ====="
  echo;
  sudo docker exec mgm-master eos -r 0 0 -b vid enable sss
  sudo docker exec mgm-master eos -r 0 0 -b vid enable unix
  sudo docker exec mgm-master eos -r 0 0 -b vid disable krb5
  sudo docker exec mgm-master eos -r 0 0 -b vid set membership daemon -uids adm
  sudo docker exec mgm-master eos -r 0 0 -b vid set membership daemon -gids adm
  sudo docker exec mgm-master eos -r 0 0 -b vid set membership daemon +sudo
  sudo docker exec mgm-master eos -r 0 0 -b vid set map -unix "<pwd>" vuid:0 vgid:0
  sudo docker exec mgm-master eos -r 0 0 -b vid add gateway ocis
  sudo docker exec mgm-master eos -r 0 0 -b debug err
  for container in ocis mgm-master; do
    sudo docker exec $container yum install -y nss-pam-ldapd nscd authconfig
    sudo docker exec $container sh -c 'authconfig --enableldap --enableldapauth --ldapserver=${EOS_LDAP_HOST} --ldapbasedn="dc=example,dc=org" --update'
    sudo docker exec $container sh -c 'sed -i "s/#binddn cn=.*/binddn cn=reva,ou=sysusers,dc=example,dc=org/" /etc/nslcd.conf'
    sudo docker exec $container sh -c 'sed -i "s/#bindpw .*/bindpw reva/" /etc/nslcd.conf'
    sudo docker exec $container nslcd
    sleep 3
    sudo docker exec $container authconfig --test | grep ena 	# expect: nss_ldap is enabled
    sudo docker exec $container id marie			# expect: uid=20001(marie) gid=30000(users) ...
  done

  # create filesystems
  echo; echo "===== CREATING FILESYSTEMS ====="
  echo;
  for i in {1..4}; do
    sudo docker exec fst mkdir /disks/eosfs${i}
    sudo docker exec fst chown daemon:daemon /disks/eosfs${i}
    sudo docker exec fst eos -r 0 0 -b fs add eosfs${i} fst.testnet:1095 /disks/eosfs${i} default rw
  done

  echo; echo ".. Done!"

  echo; echo "===== RUNNING SOME MORE CHECKS =====";
  sudo docker exec mgm-master eos group set default.0 on
  echo; sudo docker exec mgm-master eos space set default on

  echo "Giving FSes some time.."

  sleep 20

  sudo docker exec mgm-master eos ls -l eos
  sudo docker exec mgm-master eos fs ls
  sudo docker exec mgm-master eos space ls
  sudo docker exec mgm-master eos group ls

  for q in "quark-1" "quark-2" "quark-3"; do
    echo; echo "===== ${q} ====="; echo;
    sudo docker exec ${q} redis-cli -p 7777 raft-info
  done

  ## cern style eos docker root default namespace
  sudo docker exec mgm-master eos mkdir /eos/dockertest/reva/users
  sudo docker exec mgm-master eos -r 0 0 -b attr set sys.acl="u:2:rwxc" /eos/dockertest/reva/users
  sudo docker exec mgm-master eos -r 0 0 -b vid ls

  # echo; echo "===== TESTING EOSD & EOSXD MOUNTS =====";
  # sudo docker exec mgm-master eos -r 0 0 -b attr set sys.acl="u:2:rwxc" /eos/test

  # for dir in "eos" "eosxd"; do
  #   testfile="e/${dir}/test/hello.txt"

  #   echo; echo "${dir}: Writing a test file.."
  #   sudo echo "  hello, world!" > ${testfile}
  #   echo; echo "Reading the test file.."
  #   sudo cat ${testfile}
  # done

  echo; echo "..All done! To start ocis at port 9200, please do"
  echo  "    docker-compose up ocis"
}

#==============================================================================
# main script logic
#==============================================================================

if [ $# -eq 0 ]; then
  usage
fi

# check which options are set
while getopts "dscaet:" opt; do
  case "$opt" in
    d) D=true ;;
    s) S=true ;;
    c) C=true ;;
    a) A=true ;;
    e) extra=true ;;
    \?) usage ;;
  esac
done

# run actions in order
if [ $D ] || [ $A ]; then
  destroy
fi

if [ $C ]; then
  set_env
  create_files
fi

if [ $S ] || [ $A ]; then
  setup
fi
